{"version":3,"sources":["components/Form.js","components/ToDo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","inputText","setToDos","toDos","setStatus","type","className","onChange","e","target","value","onClick","preventDefault","text","completed","id","Math","random","name","ToDo","todo","map","item","filter","el","ToDoList","filterToDos","App","useState","status","setFilterToDos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalToDos","filterHandler","saveLocalToDos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.412ae9d2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({ setInputText, inputText, setToDos, toDos, setStatus }) => {\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const submitToDoHandler = (e) => {\r\n    e.preventDefault();\r\n    setToDos([\r\n      ...toDos,\r\n      { text: inputText, completed: false, id: Math.random() * 1000 },\r\n    ]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n        onChange={inputTextHandler}\r\n        value={inputText}\r\n      />\r\n      <button className=\"todo-button\" type=\"submit\" onClick={submitToDoHandler}>\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select name=\"todos\" className=\"filter-todo\" onChange={statusHandler}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst ToDo = ({ text, setToDos, toDos, todo }) => {\r\n  const deleteHandler = () => {\r\n    setToDos(toDos.filter((el) => el.id !== todo.id));\r\n  };\r\n\r\n  const completeHandler = () => {\r\n    setToDos(\r\n      toDos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed && \"completed\"}`}>{text}</li>\r\n      <button className=\"complete-btn\" onClick={completeHandler}>\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button className=\"trash-btn\" onClick={deleteHandler}>\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst ToDoList = ({ toDos, setToDos, filterToDos }) => {\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filterToDos.map((todo) => (\r\n          <ToDo\r\n            text={todo.text}\r\n            key={todo.id}\r\n            toDos={toDos}\r\n            setToDos={setToDos}\r\n            todo={todo}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default ToDoList;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [toDos, setToDos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filterToDos, setFilterToDos] = useState([]);\n\n  const getLocalToDos = () => {\n    if (localStorage.getItem(\"todos\" === null)) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setToDos(todoLocal);\n    }\n  };\n\n  useEffect(() => {\n    getLocalToDos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalToDos();\n  }, [toDos, status]);\n\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilterToDos(toDos.filter((todo) => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilterToDos(toDos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilterToDos(toDos);\n        break;\n    }\n  };\n\n  const saveLocalToDos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(toDos));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>My To Do List</h1>\n      </header>\n      <Form\n        setInputText={setInputText}\n        toDos={toDos}\n        setToDos={setToDos}\n        inputText={inputText}\n        setStatus={setStatus}\n      />\n      <ToDoList toDos={toDos} setToDos={setToDos} filterToDos={filterToDos} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}